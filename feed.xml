<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://kennyyu.me/feed.xml" rel="self" type="application/atom+xml" /><link href="http://kennyyu.me/" rel="alternate" type="text/html" /><updated>2020-02-13T19:36:22-08:00</updated><id>http://kennyyu.me/feed.xml</id><title type="html">kennary island</title><entry><title type="html">Modeling Number of Coronavirus Cases with Logistic Growth</title><link href="http://kennyyu.me/blog/2020/02/11/coronavirus-logistic-growth/" rel="alternate" type="text/html" title="Modeling Number of Coronavirus Cases with Logistic Growth" /><published>2020-02-11T20:00:00-08:00</published><updated>2020-02-11T20:00:00-08:00</updated><id>http://kennyyu.me/blog/2020/02/11/coronavirus-logistic-growth</id><content type="html" xml:base="http://kennyyu.me/blog/2020/02/11/coronavirus-logistic-growth/">&lt;p&gt;If you have been following the news recently, you may have
heard of the spread of the &lt;a href=&quot;https://www.who.int/emergencies/diseases/novel-coronavirus-2019&quot;&gt;Novel coronavirus 2019-nCoV&lt;/a&gt;.
The growth in the number of cases poses some open questions:
how many cases will we expect in the future, and at what point can we expect the number of new infections to plateau?
In this post, I’ll attempt to answer these questions with mathematical modeling.
&lt;strong&gt;With only a basic understanding of calculus and some calculations easily done in a spreadsheet, we can perform very
accurate modeling of a very complicated natural phenomenon!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logistic_final_chart.png&quot; alt=&quot;Linear Regression&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In school, we are typically given a function and then asked to calculate some properties about
the function. For example, we might be asked to compute the value of the function for some given input:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{function} \to \text{value of function for some input}&lt;/script&gt;

&lt;p&gt;However, in the real world, we do not always have access to the underlying function.
Instead, we might be given some observations about the world, and we want to use this data
to try to find an approximation to the original function that might have generated
those observations. For example,
we have the data about &lt;code class=&quot;highlighter-rouge&quot;&gt;(date, total number of coronavirus cases)&lt;/code&gt; for the past
several weeks, and we want to find the function that best matches the data.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{observed data} \to \text{function}&lt;/script&gt;

&lt;p&gt;Once we have this equation, we can use it to predict the projected number of cases in the future.
This process is very common in machine learning settings, where the process of estimating the parameters
for the function is called &lt;em&gt;training&lt;/em&gt;, and using the function to predict new values is called &lt;em&gt;inference&lt;/em&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{observed data} \xrightarrow{\text{training}} \text{function} \xrightarrow{\text{inference}} \text{value of function for some new input}&lt;/script&gt;

&lt;p&gt;For example, in a machine learning setting, the function we try to estimate might be a
probability distribution: given an email, what is the probability that it is spam? Training
samples allow us to estimate the probability distribution model, and this probability distribution allows us to
perform inference on future emails to determine if they are spam.&lt;/p&gt;

&lt;p&gt;The challenge with mathematical modeling is figuring out the right model to use
that captures the underlying phenomenon we are observing, and then estimating
the parameters for those models. In this post, I’ll talk about why a &lt;a href=&quot;https://en.wikipedia.org/wiki/Logistic_function&quot;&gt;logistic growth model&lt;/a&gt; [1]
can be used to model the number of coronavirus cases, and how we can estimate the parameters
of the logistic growth model to infer number of cases in the future.&lt;/p&gt;

&lt;h1 id=&quot;primer-about-differential-equations&quot;&gt;Primer about differential equations&lt;/h1&gt;

&lt;p&gt;We can use a &lt;em&gt;differential equation&lt;/em&gt; to understand the intuition behind the
logistic growth model. For readers unfamiliar with differential equations,
this section provide some intuition behind them.&lt;/p&gt;

&lt;p&gt;As a &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programmer&lt;/a&gt; [2]
at heart, the best way I understand new concepts
is to first understand the &lt;em&gt;types&lt;/em&gt; involved. In the normal equations one
typically sees in school, the solution to the equations are usually
a set of &lt;em&gt;values&lt;/em&gt; in the real numbers or complex numbers. For example,
the solution to the following equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x^2 - 3x + 2 = 0&lt;/script&gt;

&lt;p&gt;is the set of real numbers&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x \in \{1, 2\}.&lt;/script&gt;

&lt;p&gt;For a differential equation, the solution to the equation is a set of &lt;em&gt;functions&lt;/em&gt;.
For example, for the following differential equation where $r$ is a constant and
$P$ is a function of $t$:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{dP}{dt} = rP&lt;/script&gt;

&lt;p&gt;this equation means that both sides are equal for all values of $t$.
The solution to this differential equation is a &lt;em&gt;family of functions&lt;/em&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P = P_0 e^{rt}&lt;/script&gt;

&lt;p&gt;for all constants $P_0$. We can take the derivative to double
check that it satisfies the differential equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{dP}{dt} = \frac{d}{dt}\left( P_0 e^{rt} \right) = r P_0 e^{rt} = rP.&lt;/script&gt;

&lt;h1 id=&quot;logistic-growth-differential-equation&quot;&gt;Logistic growth differential equation&lt;/h1&gt;

&lt;p&gt;The differential equation above models &lt;em&gt;exponential growth&lt;/em&gt;. As an example,
we can imagine $P(0)$ as the population of bunnies at time $t = 0$. Given
infinite resources in the environment, suppose each bunny has $r = 2$ bunnies
as offspring every year. Then in the next year, we expect there to be $rP(0) = 2 * P(0)$
additional bunnies, for a total of $P(1) = rP(0) + P(0)$ bunnies at time $t = 1$.
In the second year, we expect there $rP(1) = 2 * P(1)$ additional bunnies, for a total
of $P(2) = rP(1) + P(1)$ total bunnies, and so on.&lt;/p&gt;

&lt;p&gt;More generally, given a population size $P$ at time $t$, and a growth
rate $r$, we expect the net change in total number of bunnies over some period of time, represented as the
derivative, to be the following:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{dP}{dt} = rP.&lt;/script&gt;

&lt;p&gt;However, the real world is constrained: there is not be enough food in
the environment to support unlimited growth in bunnies. As more bunnies
enter the population and the environment gets saturated, the growth in
the number of additional bunnies added year over year should start 
to decrease. To constrain the growth, we add an additional constraining factor
into the differential equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{dP}{dt} = rP\left(1 - \frac{P}{K}\right)&lt;/script&gt;

&lt;p&gt;where $K$ is the maximum size the population will ever be. This differential equation
models &lt;em&gt;logistic growth&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When $P$ is small, the right factor will be close to 1, and this function will
approximate exponential growth. When $P$ grows and starts to approach $K$,
the right factor will start to approach 0, and this causes
the rate of growth to decrease. The solution to this differential equation is
the family of functions&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P = \frac{K}{1+\left(\frac{K - P_0}{P_0}\right)e^{-rt}}&lt;/script&gt;

&lt;p&gt;for all constants $P_0$. Here, $P_0$ represents the starting population size at time $t = 0$.&lt;/p&gt;

&lt;p&gt;Similar to population growth in a constrained environment, the logistic growth
equation can also be used to model number of infected people with the novel coronavirus.
During the initial outbreak, the number of cases grow exponentially. As
more people became infected and people enter quarantine, the infection
starts to saturate, as there are fewer new people to be infected.&lt;/p&gt;

&lt;p&gt;For more intuition
and interesting properties about the logistic growth model, I highly recommend
watching &lt;a href=&quot;https://www.youtube.com/watch?v=ovJcsL7vyrk&quot;&gt;this youtube video from the Veritasium channel&lt;/a&gt; [3] – 
this channel is great for learning interesting scientific and mathematical phenomenon, and is what
inspired me to write this post!&lt;/p&gt;

&lt;p&gt;The rest of this post will discuss how we model the number of coronavirus cases over time
using a logistic growth model. Our goal is the following:&lt;/p&gt;

&lt;p&gt;1) Using the current data available about &lt;code class=&quot;highlighter-rouge&quot;&gt;(date, total number of coronavirus cases)&lt;/code&gt;, we want to infer
   the logistic growth parameters $r, K, P_0$.&lt;/p&gt;

&lt;p&gt;2) Using the estimated parameters, predict the total number of coronavirus cases in the future.&lt;/p&gt;

&lt;h1 id=&quot;estimating-logistic-growth-parameters&quot;&gt;Estimating Logistic Growth Parameters&lt;/h1&gt;

&lt;h4 id=&quot;estimating-r-and-k&quot;&gt;Estimating $r$ and $K$&lt;/h4&gt;

&lt;p&gt;To calculate parameters $r, K, P_0$, let’s first rewrite the logistic growth differential equation by dividing both sides by $P$:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\frac{dP}{dt}}{P} = r\left(1 - \frac{P}{K}\right) = -\frac{r}{K}P + r.&lt;/script&gt;

&lt;p&gt;We can use the data &lt;code class=&quot;highlighter-rouge&quot;&gt;(date, total number of coronavirus cases)&lt;/code&gt; to calculate the left hand side of the equation.
For example, suppose our data looked like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(t, P(t))
(day 1, 100 cases)
(day 2, 200 cases)
(day 3, 400 cases)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we can estimate the derivative $dP/dt$ on day 2 using the following:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{dP}{dt}(2) = \frac{\text{net change in cases}}{\text{net change in time}} = \frac{P(2 + 1) - P(2 - 1)}{(2 + 1) - (2 -1)} = \frac{400 - 100}{3 - 1} = 150.&lt;/script&gt;

&lt;p&gt;Dividing by $P(t)$ gives us the following:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\frac{dP}{dt}(2)}{P(2)} = \frac{150}{P(2)} = \frac{150}{200} = \frac{3}{4}.&lt;/script&gt;

&lt;p&gt;Note that in the rewritten equation, the left hand side is proportional to the right hand side,
which reminds us of linear relationships $y = mx + b$:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\frac{dP}{dt}}{P} = -\frac{r}{K}P + r&lt;/script&gt;

&lt;p&gt;where $m = -r/K$ is the slope of $x = P$ with respect to $y = (dP/dt)/P$, and $b = r$ is the $y$-intercept. 
To calculate the slope and the intercept, we can create a scatterplot of the calculated
$(x, y) = (P, (dP/dt)/P)$ values in our dataset, and then use a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_regression&quot;&gt;&lt;em&gt;linear regression&lt;/em&gt;&lt;/a&gt; [4] to calculate
the line of best fit for the slope and intercept. In Google Sheets, you can calculate this using
the &lt;code class=&quot;highlighter-rouge&quot;&gt;SLOPE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;INTERCEPT&lt;/code&gt; macros. For more information about this technique to find $r$ and $K$,
take a look at &lt;a href=&quot;https://www.maa.org/press/periodicals/loci/joma/logistic-growth-model-fitting-a-logistic-model-to-data-i&quot;&gt;this MAA article&lt;/a&gt; [5].&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logistic_linear_regression.png&quot; alt=&quot;Linear Regression&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For our estimation, we used the number of coronavirus cases from January 23 to February 9, and
we obtained this data from &lt;a href=&quot;https://www.worldometers.info/coronavirus/coronavirus-cases/&quot;&gt;this source&lt;/a&gt; [6].
The figure above shows the scatterplot and the blue line represents the results of the
linear regression using all the data points.
Note that the first few data points are outliers compared to the rest of the data. If we
ignore these data points, we can estimate a more accurate line of best fit. 
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_sample_consensus&quot;&gt;Random Sample and Consensus (RANSAC) Algorithm&lt;/a&gt; [7]
can find this automatically, however in our case, it was simple enough to eyeball it from the
scatterplot and manually exclude the initial data points, and this results in the line of best fit in red.&lt;/p&gt;

&lt;p&gt;From this linear regression, we calculated the following results for $r$ and $K$ to be the following:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;r = 0.277&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;K = 51109&lt;/script&gt;

&lt;p&gt;This means that in our estimated model, the total number of people that will ever be infected with coronavirus will be $K = 51109$,
and during the early exponential growth phase of the outbreak, each persion roughly infects $0.27$ new people per day.&lt;/p&gt;

&lt;h4 id=&quot;estimating-p_0&quot;&gt;Estimating $P_0$&lt;/h4&gt;

&lt;p&gt;Now that we have our estimates for $r$ and $K$, the final step is to estimate the initial starting population size $P_0$.
To get some intuition on the potential values for $P_0$, I created two plots of the logistic growth function $P$
using our calculated values for $r$ and $K$, and the two plots used different initial starting population size $P_0 = 1317$ and $P_0 = 2015$.
These numbers were the number of total cases as of January 24 and January 25, respectively. The figure below shows the result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logistic_P0_guess.png&quot; alt=&quot;Linear Regression&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The real number of cases (shown in blue) is sandwiched between the two estimated plots, and this shows that the true value of $P_0$ is somewhere
between these two values. To calculate the optimal value of $P_0$ that gives us the best-fit logistic growth,
we can define an optimization problem, where the solution to the optimization problem gives us the best fit value for $P_0$.&lt;/p&gt;

&lt;p&gt;Let $P_{est}(P_0, t)$ be the estimated total number of coronavirus cases at time $t$, using the $r$ and $K$ values we calculated earlier, and
the provided input $P_0$. This estimation will probably not match exactly the real observed number of cases $P_{real}(t)$. Let&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{Error}(P_0, t) = (P_{est}(P_0, t) - P_{real}(t))^2&lt;/script&gt;

&lt;p&gt;represent the error between our estimation and true number of cases at time $t$ and a given $P_0$.
Here, we chose the square of the difference so that the error function is always non-negative and is
differentiable (unlike the absolute value function). Next, we define the total error function:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{TotalError}(P_0) = \sum_{t} \text{Error}(P_0, t)&lt;/script&gt;

&lt;p&gt;be the sum of all the errors for all observed data points at times $t$.
By making the error function always be non-negative, this allows us to reframe the search for the best $P_0$ for our logistic growth model
as an optimization problem: the value of $P_0$ that minimizes the total error will be the best $P_0$ for our model.&lt;/p&gt;

&lt;p&gt;Analytically, we can calculate the extrema (minimum and maximum) of a function by taking the derivative with respect to $P_0$ and setting it equal to 0:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{d}{dP_0} \text{TotalError}(P_0) = 0&lt;/script&gt;

&lt;p&gt;However, the calculations involved in doing this derivative for all data points would be too complex.
Instead, I used &lt;a href=&quot;https://gist.github.com/kennyyu/a68b647068551b14e2463d44ec53a99e&quot;&gt;this python script&lt;/a&gt;
to calculate
the $\text{TotalError}(P_0)$ function for all values between our initial estimates of $P_0 = 1317$ and $P_0 = 2015$, and 
plotted the data in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logistic_P0_estimate.png&quot; alt=&quot;Linear Regression&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this plot, we see that we achieve the minimum total error when&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_0 = 1634.&lt;/script&gt;

&lt;h1 id=&quot;predicting-number-of-future-coronavirus-cases&quot;&gt;Predicting number of future Coronavirus cases&lt;/h1&gt;

&lt;p&gt;Finally, we have all the estimates for the parameters for our logistic growth model $P$.
For the data &lt;code class=&quot;highlighter-rouge&quot;&gt;(date, total number of coronavirus cases)&lt;/code&gt; &lt;a href=&quot;https://www.worldometers.info/coronavirus/coronavirus-cases/&quot;&gt;from January 23 to February 9&lt;/a&gt;,
we have the following values for our parameters:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P = \frac{K}{1+\left(\frac{K - P_0}{P_0}\right)e^{-rt}}&lt;/script&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;r = 0.277&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;K = 51109&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_0 = 1634&lt;/script&gt;

&lt;p&gt;For reference, the calculations and figures were
done in &lt;a href=&quot;https://docs.google.com/spreadsheets/d/144t1-LOYBLMuPm4ojgLeP_RddcNPnF_8sD5CVtUTfCo/edit#gid=0&quot;&gt;this Google Sheet&lt;/a&gt; [8].
Using these parameters in our function $P$, we can use it to predict the number of cases
at a future time $t$. The figure below plots our model $P$ with the real number of cases.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logistic_final_chart.png&quot; alt=&quot;Linear Regression&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our logistic growth model $P$ is in red, the real observed data points
used to estimate the model are in blue, and the new data points 
that have been collected since I created the model are in yellow.&lt;/p&gt;

&lt;p&gt;For the new data points on February 10 and February 11, the prediction from our model
is $1.7\%$ and $2.2\%$ off from the real reported total number of cases up to that day.
Pretty good!&lt;/p&gt;

&lt;p&gt;This model also predicts that the total number of cases will stop growing at
$K = 51109$, and the daily number of new cases will be less than 100 starting on February 23.&lt;/p&gt;

&lt;h1 id=&quot;limitations&quot;&gt;Limitations&lt;/h1&gt;

&lt;p&gt;You probably noticed on the last figure: what happened on February 12? Why is our estimation
so off on that day? Despite the initial accuracy of the logistic growth model, the model
has limitations, and the real world is much more complex.&lt;/p&gt;

&lt;p&gt;As an example, as I was writing this post, the Chinese government &lt;a href=&quot;https://www.nytimes.com/2020/02/12/world/asia/china-coronavirus-cases.html&quot;&gt;changed the definition of how
it counts coronavirus cases&lt;/a&gt;,
resulting in the 15,000 additional cases on February 12 in the figure above. 
Furthermore, the model will not take into account new outbreaks that might happen in different cities,
which may result in a sudden growth in new infections. As the Lunar New Year holiday in China ends and
more people start to travel again, this may also increase the rate of infection, reducing the constraining factor
essential to the logistic growth model. In addition, the logistic growth model assumes a constant
growth factor $r$, however, the coronavirus may behave differently in different people, and it may
evolve to become more or less infectious over time.&lt;/p&gt;

&lt;p&gt;Despite these limitations, the logistic growth model provides us with a surprisingly
accurate way to model the number of coronavirus cases so far using only basic calculations
that can be done in a spreadsheet!&lt;/p&gt;

&lt;p&gt;Thanks for reading! I hope you learned something new!&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;[1] &lt;a href=&quot;https://en.wikipedia.org/wiki/Logistic_function&quot;&gt;Logistic Growth Model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[2] &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;Functional Programming&lt;/a&gt; – A key factor in functional programming is understanding the types. The best way for me to understand new concepts is to understand the types and their relationships with each other.&lt;/li&gt;
  &lt;li&gt;[3] &lt;a href=&quot;https://www.youtube.com/watch?v=ovJcsL7vyrk&quot;&gt;Youtube video from Veritasium explaining the logistic growth equation and other interesting facts about it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[4] &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_regression&quot;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[5] &lt;a href=&quot;https://www.maa.org/press/periodicals/loci/joma/logistic-growth-model-fitting-a-logistic-model-to-data-i&quot;&gt;Logistic Growth Model: Fitting a Logistic Model to Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[6] &lt;a href=&quot;https://www.worldometers.info/coronavirus/coronavirus-cases/&quot;&gt;Worldometer: Coronavirus Cases&lt;/a&gt; – This is where I obtained the &lt;code class=&quot;highlighter-rouge&quot;&gt;(date, number of coronavirus cases)&lt;/code&gt; data. In this post, I used the data from January 23 to February 9 to estimate the parameters for the model.&lt;/li&gt;
  &lt;li&gt;[7] &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_sample_consensus&quot;&gt;Random Sample Consensus (RANSAC)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[8] &lt;a href=&quot;https://docs.google.com/spreadsheets/d/144t1-LOYBLMuPm4ojgLeP_RddcNPnF_8sD5CVtUTfCo/edit#gid=0&quot;&gt;Google Sheet where these calulations were done&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">If you have been following the news recently, you may have heard of the spread of the Novel coronavirus 2019-nCoV. The growth in the number of cases poses some open questions: how many cases will we expect in the future, and at what point can we expect the number of new infections to plateau? In this post, I’ll attempt to answer these questions with mathematical modeling. With only a basic understanding of calculus and some calculations easily done in a spreadsheet, we can perform very accurate modeling of a very complicated natural phenomenon!</summary></entry><entry><title type="html">Technical Interview Workshop</title><link href="http://kennyyu.me/blog/2014/07/31/technical-interview-workshop/" rel="alternate" type="text/html" title="Technical Interview Workshop" /><published>2014-07-31T01:06:00-07:00</published><updated>2014-07-31T01:06:00-07:00</updated><id>http://kennyyu.me/blog/2014/07/31/technical-interview-workshop</id><content type="html" xml:base="http://kennyyu.me/blog/2014/07/31/technical-interview-workshop/">&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;//www.youtube.com/embed/U0nvXHh7o-w&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;In November 2012, I gave a seminar about &lt;a href=&quot;https://github.com/kennyyu/workshop&quot;&gt;technical interviews&lt;/a&gt;
for students in CS50.
I didn’t realize that the video was on youtube until today, and it has almost 5000
views! I’m glad I can keep a memento of me teaching!&lt;/p&gt;

&lt;p&gt;A note about the video: I usually use the whiteboard when teaching and I
write much neater than I do in the video. However, I had to use a tablet
for video recording purposes, and it’s really hard to write on a touch screen!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">197,717 Lines of Code Later…</title><link href="http://kennyyu.me/blog/2014/06/12/197717-lines-of-code-later-dot-dot-dot/" rel="alternate" type="text/html" title="197,717 Lines of Code Later..." /><published>2014-06-12T15:16:00-07:00</published><updated>2014-06-12T15:16:00-07:00</updated><id>http://kennyyu.me/blog/2014/06/12/197717-lines-of-code-later-dot-dot-dot</id><content type="html" xml:base="http://kennyyu.me/blog/2014/06/12/197717-lines-of-code-later-dot-dot-dot/">&lt;p&gt;After taking 18 computer science classes at Harvard (17 in CS, 1 in EE),
I was curious to see exactly how many lines of code I have written
for assignments these past four years. I was also curious what the breakdown
would be for the different programming languages I’ve learned over the years.&lt;/p&gt;

&lt;p&gt;After looking through the archives of my computer, I calculated that I wrote
&lt;strong&gt;197,717&lt;/strong&gt; lines of code (141,008 insertions, 56,709 deletions) for my
classes in the past four years! In fact, I believe this is actually
an underestimate. In this post, I’ll talk about how
I calculated this number, and assumptions I made when calculating this
number.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/count-course.png&quot; alt=&quot;Lines of Code by Course&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/count-filetype.png&quot; alt=&quot;Lines of Code by File Type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/count-semester.png&quot; alt=&quot;Lines of Code by Semester&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;examining-my-git-log&quot;&gt;Examining my git log&lt;/h2&gt;

&lt;p&gt;Fortunately, except for freshman year, I used git for all my projects
and assignments. As a result, I can compute the number of lines of code I wrote
by examining by git log history. Using git made calculating my contributions on
group projects especially easy as git keeps track of who authored each commit.
Furthermore, by examining the insertions and deletions of each commit, as opposed to
examining the line count at the HEAD of the branch, I can see a more accurate number
of lines I wrote and deleted, as opposed to the final count at the end of the
assignment/project.&lt;/p&gt;

&lt;p&gt;For each git repository, I did the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Determine which commits were authored by me, using the following command:
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --author=Kenny --oneline&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For each of those commits, examine the insertion/deletion count for that
commit, broken down for each file: &lt;code class=&quot;highlighter-rouge&quot;&gt;git show COMMIT --oneline --numstat&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Aggregate those stats by file name across all the commits in a repository,
then aggregate those stats by file type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do this across all the git repositories for all the courses I took.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to examine your own stats across a repository, you can check
out my &lt;a href=&quot;https://gist.github.com/kennyyu/5e59519b3972823e20bf&quot;&gt;python counting script&lt;/a&gt;.
Here’s a snippet of the relevent code performing the steps above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Runs the shell command and returns the stdout as a list
    of strings.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;devnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# strip trailing newline characters
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;commits_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Returns the list of commit hashes by the given author
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;git log --author=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --oneline&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;commit_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Returns a mapping of filename -&amp;gt; (additions, deletions)
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;git show &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s --oneline --numstat&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# the first line is just a repeat of the hash, so skip it
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# stats are of the form:
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# additions    deletions    filename
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;deletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;I followed these rules when calculating my total line count.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ignore autogenerated, binary, or raw data files when calculating a line count.&lt;/strong&gt;
When I performed the count on my various git repositories, I noticed that I
was not always very disciplined on what I was checking into the repository.
Often, courses would want us to submit files that were autogenerated, and so I
checked in autogenerated files, binaries, images, csvs, etc. into the repository.
Thus, I made an option in my scipt to ignore certain file extensions so
that I do not get an inflated line count. Furthermore, I took the notion of “code”
to mean anything that was not autogenerated, so I included file types like
 &lt;code class=&quot;highlighter-rouge&quot;&gt;.tex&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; as code (as long as they were not autogenerated).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Prefer underestimates over overestimates.&lt;/strong&gt;
I did not know how to use git freshman year, and as a result, I cannot get an
accurate count for the number of lines of code for CS50, CS51, or CS179. As a result,
I only included code that I entirely wrote myself, which excludes modifying code
from distribution code from a problem set, and code I wrote as part of team projects.
For CS51, I had the original
tarball distribution for some of the assignments, so I was able to diff the distribution
code with my final assignment submittion. As a result of this exlcusion, the line count
for these three courses is much smaller than it actually is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Only include code written for assignments.&lt;/strong&gt;
As a result, I did not count lines of code written for section or lines of code
I wrote when &lt;a href=&quot;/blog/2014/04/29/reflecting-on-3-years-of-teaching/&quot;&gt;TFing these past 3 years&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;classes-ive-taken&quot;&gt;Classes I’ve Taken&lt;/h2&gt;

&lt;p&gt;For reference, here’s the list of the computer science classes I’ve taken and when
I took them (and possible links to related blog posts).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kennyyu/cs50section&quot;&gt;CS50 - Introduction to Computer Science&lt;/a&gt; (Fall 2010)&lt;/li&gt;
  &lt;li&gt;CS51 - Abstraction and Design (Spring 2011)&lt;/li&gt;
  &lt;li&gt;CS179 - Design of Usable Interactive Systems (Spring 2011)&lt;/li&gt;
  &lt;li&gt;CS61 - Systems Programming and Machine Organization (Fall 2011)&lt;/li&gt;
  &lt;li&gt;CS153 - Compilers (Fall 2011)&lt;/li&gt;
  &lt;li&gt;CS124 - Algorithms and Data Structures (Spring 2012)&lt;/li&gt;
  &lt;li&gt;CS262 - Introduction to Distributed Computing (Spring 2012)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2012/05/18/binary-search/&quot;&gt;CS207 - Systems Development for Computational Science&lt;/a&gt; (Spring 2012)&lt;/li&gt;
  &lt;li&gt;CS121 - Introduction to Theory of Computer Science (Fall 2012)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy/&quot;&gt;CS283 - Computer Vision&lt;/a&gt; (Fall 2012)&lt;/li&gt;
  &lt;li&gt;CS181 - Artificial Intelligence (Spring 2013)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2014/03/20/writing-synchronization-problems-for-os161/&quot;&gt;CS161 - Operating Systems&lt;/a&gt; (Spring 2013)&lt;/li&gt;
  &lt;li&gt;CS261 - Research Topics in Operating Systems (Fall 2013)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cs109.joeong.com/&quot;&gt;CS109 - Data Science&lt;/a&gt; (Fall 2013)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2013/11/18/bootcamps/&quot;&gt;CS91r - Supervised Reading and Research with Jim Waldo&lt;/a&gt; (Fall 2013)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2014/03/19/c-error-handling/&quot;&gt;CS165 - Data Systems&lt;/a&gt; (Spring 2014)&lt;/li&gt;
  &lt;li&gt;CS91r - Supervised Reading and Research  with Margo Seltzer (Spring 2014)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2014/06/04/tinibot-a-voice-activated-drink-mixer/&quot;&gt;ES50 - Introduction to Electrical Engineering&lt;/a&gt; (Spring 2014)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;It’s not a surprise for me that I have written more C code than any other language in college,
but it surprised me that python was a close second. However, I realized that I
now use python as my goto language for prototyping and data analysis, and I’ve used
python in more classes than any other class (CS283, CS181, CS109, both CS91r’s, ES50, CS261)
compared to C (CS61, CS161, CS165). I was surprised the java count was so high,
as I have used java mainly in internships. I realized that this came from
CS124 (I used java for Mitzenmacher’s programming assignments) and for CS262
(you gotta use java if you’re in Jim Waldo’s class!). Furthermore, I was shocked
that the ocaml (&lt;code class=&quot;highlighter-rouge&quot;&gt;.ml&lt;/code&gt;) line count was so low, as I felt like I wrote much more code
when taking CS153 (Compilers). However, I haven’t written ocaml code for a class since
compilers, and so this count makes sense.&lt;/p&gt;

&lt;p&gt;I was a bit surprised at first on why the theoretical classes (CS124, CS121) had
such a high line count, and then I realized it was mostly due to &lt;code class=&quot;highlighter-rouge&quot;&gt;.tex&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;CS161 is often considered the most difficult and time-consuming class at Harvard,
and so I thought that CS161 would probably have the highest line count. I was surprised
that CS181 and CS165 beat the CS161 count. I believe that because there was no
distribution code for CS165 (Data Systems), I had to write a lot more (but less interesting)
code to make all the glue for my database. For CS181, the course and assignments
were so disorganized the year I took it, and as a result, there were frequent large commits
that were mostly overhaul and rewriting everything.&lt;/p&gt;

&lt;p&gt;When examining the line count by semester, my spring semesters have a much
higher line count than my fall semester, and my Spring 2013 semester has the
highest count (not a surprise! I was taking CS161 and CS181 at that time).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In the end, I calculated that I made 197,717 changes
(141,008 insertions, 56,709 deletions) over the past four years. This number is
probably an underestimate, but I assume it’s around the ballpark of the true number
of lines of code I’ve written in college. This makes me appreciate just how much
one can learn and do in four years!&lt;/p&gt;</content><author><name></name></author><summary type="html">After taking 18 computer science classes at Harvard (17 in CS, 1 in EE), I was curious to see exactly how many lines of code I have written for assignments these past four years. I was also curious what the breakdown would be for the different programming languages I’ve learned over the years. After looking through the archives of my computer, I calculated that I wrote 197,717 lines of code (141,008 insertions, 56,709 deletions) for my classes in the past four years! In fact, I believe this is actually an underestimate. In this post, I’ll talk about how I calculated this number, and assumptions I made when calculating this number.</summary></entry><entry><title type="html">tiniBot: A Voice-Activated Drink Mixer</title><link href="http://kennyyu.me/blog/2014/06/04/tinibot-a-voice-activated-drink-mixer/" rel="alternate" type="text/html" title="tiniBot: A Voice-Activated Drink Mixer" /><published>2014-06-04T19:34:00-07:00</published><updated>2014-06-04T19:34:00-07:00</updated><id>http://kennyyu.me/blog/2014/06/04/tinibot-a-voice-activated-drink-mixer</id><content type="html" xml:base="http://kennyyu.me/blog/2014/06/04/tinibot-a-voice-activated-drink-mixer/">&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;//www.youtube.com/embed/xetTOXwaTmc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;This past semester, I took ES50, Harvard’s introductory course in electrical
engineering. For our final project, my group decided to make a voice-activated
drink mixer! I was in charge of the coding component of the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tinibot-code.jpg&quot; alt=&quot;Omnibox GDrive Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code is available on &lt;a href=&quot;https://github.com/kennyyu/tinibot&quot;&gt;github&lt;/a&gt;.
To do the speech recognition, I
used the Chrome Speech API. Once I have the transcribed text, I send
the text to a local server, which figures out the drink that was ordered,
and then sends the appropriate times to open each of the bottles.
The server sends these times to the attached Arduino, which then
sends current to the appropriate solenoid valves for the designated times.
When activated, the solenoid valves allow liquid to flow through.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Reflecting on 3 Years of Teaching</title><link href="http://kennyyu.me/blog/2014/04/29/reflecting-on-3-years-of-teaching/" rel="alternate" type="text/html" title="Reflecting on 3 Years of Teaching" /><published>2014-04-29T16:30:00-07:00</published><updated>2014-04-29T16:30:00-07:00</updated><id>http://kennyyu.me/blog/2014/04/29/reflecting-on-3-years-of-teaching</id><content type="html" xml:base="http://kennyyu.me/blog/2014/04/29/reflecting-on-3-years-of-teaching/">&lt;p&gt;I taught my last section as an undergraduate today.
I’ve been a teaching fellow for a computer science class
every semester for the past three years, teaching:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CS50 (Intro to Computer Science), Fall 2011&lt;/li&gt;
  &lt;li&gt;CS51 (Abstraction and Design), Spring 2012 and Spring 2013&lt;/li&gt;
  &lt;li&gt;CS61 (Systems Programming and Machine Organization), Fall 2012 and Fall 2013&lt;/li&gt;
  &lt;li&gt;CS161 (Operating Systems), Spring 2014&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At Harvard, a “Teaching Fellow” is the equivalent of
teaching assistants at most other universities.
Technically, I’m a “Course Assistant” as the title
“Teaching Fellow” is reserved for graduate students, but in
many of the classes that I’ve taught, the undergraduates have
the same (if not more) responsibilities than the graduate
students. These typically include teaching section, holding
office hours, and grading.&lt;/p&gt;

&lt;p&gt;Over the past three years, I’ve attempted to have an impact in
all of the classes I’ve taught, and hopefully that impact will
last after I graduate. Also, I’ve learned several lessons about teaching
computer science classes, and I have advice for current
or future undergraduates considering teaching.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;contributions&quot;&gt;Contributions&lt;/h2&gt;

&lt;p&gt;Below is a list of some of the ways I’ve contributed to the courses
that I’ve taught:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/kennyyu/cs50section&quot;&gt;CS50 Section Notes&lt;/a&gt;&lt;/strong&gt; -
Before CS50 standardized the section notes
for each section, many of the teaching fellows often prepared
their own material for section (based on a set of example material
from previous years). I took this as an opportunity to create
material that I wish there were more of when I took the class:
more interactive coding labs, and fun technical interview-esque
problems for students with the extra time and interest. The end
result of this include coding labs teaching students file IO
(reading/writing pokemon structs from/to disk), implementing
essential data structures, building a pokedex (end-to-end web
application with a mysql backend), autocompletion (how to
perform asynchronous http requests), and many brainteaser
coding questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CS51 Moogle: 2-3 Trees&lt;/strong&gt; - CS51 is one of the few courses at Harvard
that uses OCaml as the core programming language for the course. The
class is famous for it’s moogle problem set: at the end of the assignment,
students will have a working web crawler that can index a graph of web pages
and then rank them with different ranking algorithms (e.g., PageRank).
The goal of this assignment is to teach students abstraction and modularization
while implementing sets, maps, and rankers in different ways. In my first
time teaching the class, I was tasked to write a new portion of the assignment:
have students implement balanced trees with 2-3 trees. Implementing the 2-3 trees
was definitely a non-trivial task, but what made it more difficult was structuring
the code so that (1) it would be instructive for students who would need to understand
and modify the code to implement the 2-3 trees, and (2) the code would allow
for proper unit testing when the course staff later grades the student submissions.
Two years later, the course is still using my code in that assignment!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CS51 Object Oriented Programming Notes&lt;/strong&gt; - When I took CS51, the course was still taught
in both OCaml and Java. In my first year teaching the class, the professor
decided to axe the Java portion of the class because it was too difficult to
introduce object oriented programming concepts while having the students pick up
and entirely new programming language in only a few weeks. As a result,
the course staff decided to teach OO using the OO side of ocaml. I was tasked
with writing the section notes for this material. It was a learning experience to
figure out how to introduce so many new terms
(objects, classes, subclassing, inheritance, interfaces,
methods, overriding, polymorphism, subtyping, …) in one section and not overwhelm
the students. Two years later, the course is still using these section notes!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CS61&lt;/strong&gt; - When I taught CS61 for the first time, it was also
Eddie Kohler’s first time as the instructor for the course. He taught the course
differently from previous years and emphasized different concepts and as a result,
the course required a whole new set of section notes. Furthermore, the
course had a much smaller staff than the previous classes I had taught. As a result,
I ended contributing to and writing many of the
&lt;a href=&quot;http://cs61.seas.harvard.edu/wiki/2012/Section&quot;&gt;section notes&lt;/a&gt; for that year. I took
that as an opportunity to present the course material in a different light
from the way material was presented in lecture, hopefully providing confused students a
clearer picture of course concepts. In my second time teaching the class, I was one of
the few returning course staff from the previous year, and I felt honored
that Eddie valued my opinion
on what I thought were the good and bad parts from the previous year.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;/blog/2014/03/20/writing-synchronization-problems-for-os161/&quot;&gt;CS161 Synchronization Problems&lt;/a&gt;&lt;/strong&gt; - At the beginning of this semester, I was tasked
with writing the sychronization problems for the synchronization problem set. I
tried to phrase the problem in an amusing and instructive way, and hopefully
these problems will be used again in future offerings of the class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, an undergraduate teaching fellow can have a &lt;strong&gt;huge and lasting impact&lt;/strong&gt;
on a course, including coming up with new assignments, writing new section notes, or
directing the overall direction of a course.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;

&lt;p&gt;After teaching in so many different classes and so many different
students over the past three years, I’ve learned a few lessons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Students can achieve more than they think they can.&lt;/strong&gt; I remember before teaching my very
first section for CS50, I was told that my section was a “More Comfortable” section. In CS50,
students are placed into sections based on how they self-identify themselves into the buckets
“Less Comfortable”, “More Comfortable”, and “Somwhere In Between.” As a result, I spent that
week preparing material I thought would be appropriate for more advanced students (material
including code labs and fun brain teaser technical interview questions). When I stepped
into the very first section and double checked with students that this was a more comfortable
section, they all gave me grim stares of horror and told me that the section was actually
“Somewhere in Between.” It turns out that the head TFs for the class had accidentally
informed incorrectly about my section. However, I still taught the section as if it were
more comfortable: I still prepared for the code labs and brain teaser coding questions,
and I tried to be as clear and instructive as I could in my slides and explanations
of course concepts. At the end of the semester, many of the students did very well
in the class and thought section was taught at an appropriate, if not slow, pace.
As a result, I learned that students can undervalue their abilities: the
students regarded themselves as “somewhere in between” when they achieved just as well
as the “more comfortable” students.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Make section relevent and useful for the students who attend.&lt;/strong&gt;
In all of the courses that I’ve
taught, section was always optional but highly encouraged. I’ve been in many classes
were I had required section that I thought was pointless, or I’ve attended optional sections
only to find them unhelpful, discouraging me from attending future sections. As a result,
I highly value the students’ opinion when I do have the privilege of them
attending my section, I want to make all of my sections helpful and useful for
the students that choose to attend. To do this, for CS50,
CS51, and CS61, I would always email a short anonymous feedback survey to students in
my section
to see what they thought was good and bad, and what they wanted to cover the following
week. I took this feedback to heart when planning material for sectiones, and as a result,
my sections always had a consistently near 100% (and for CS61 my first time, &amp;gt; 100%)
attendance, when many other sectiones taught by other course staff had lower a lower
attendance rate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Effective teaching requires planning, planning, planning.&lt;/strong&gt; Before every section,
I would always plan out the agenda for the section, making sure every concept transitioned
smoothly to the next, and I had clear explanations and guiding questions to motivate
the material. Often, planning took longer than the actual length of time of section.
I learned very quickly that I was better and more comfortable teaching
using the white board/chalk board than using a slideshow. Using the board allowed
for more interactivity with students, and it made it easier to draw diagrams. Also,
writing things down on the board give time for students to pause and think, whereas
it is often difficult for students to read the text on slides while at the same time
having to listen to what the instructor has to say. As a result, I filled notebooks
with notes on how I would present the material in section, carefully planning out
my boardwork, how to make the most effective use of the board, and planning
diagrams I would use to explain the concepts. From this experience,
I learned to appreciate and admire the planning teachers have to do in preparation for
classes, and I also learned that I greatly enjoy the lesson planning part
of teaching.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The most valuable thing you can do for students at office hours is to teach
students how to discover the answers themselves.&lt;/strong&gt; One of the things I’ve
learned in my four years as an undergraduate is how to go about searching for
an answer to a question–often involving googling, experimenting at the command line,
and code reading. As I’ve moved on to higher level and more difficult courses,
the thing that I notice more about the more advanced students is their ability
to independently acknowledge what they don’t know, and then take the initiative to
go about searching for the answer themselves. My experience with CS50 office hours
typically involved conversations of the form: “Student: Things don’t work,
can you fix it? Me: what have you tried? Student: not much.” and the student
would then sit with me until the problem was resolved. At office hours for CS161,
the conversations are typically of the form: “Student: Things don’t work,
do you have any ideas why? Me: what have you tried? Student: gdb, grep, find,
binary searching the problem…” As a result, I realize that what makes students
more “advanced” is their ability to self-diagnose their own problems and take
the initiative to resolve them. Thus, my philosophy for office hours is to emphasize
teaching students the tools to go about solving a problem instead of telling
them the answer directly. One of my students
remarked on this philosophy in a comment in the Q guide,
stating “Kenny has tough love at office hours.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Grading is very difficult.&lt;/strong&gt; For me, grading is typically the most difficult
and time consuming part of being a TF. Automated testing for correctness is
not enough, as students typically (and rightfully) want in-depth feedback on how
they can improve. As a result, much of my experience grading as a TF has been
learning how to give appropriate and useful feedback, and I still have much to learn
in this area.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Professors are people too.&lt;/strong&gt; When you’re taking a class and spending many
all-nighters on a problem set, it’s easy to assume the professors are monsters
and forget
that professors are people too with their own lives, families, and goals.
After working with four different instructors on their course staff, I see
the course from the course staff point of view and I begin to understand
why professors structure the courses the way they do, and how much they do
in fact care about their courses and students, despite them not seeming to do
so when you’re up coding late into the early morning.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advice-for-current-and-future-undergraduates&quot;&gt;Advice for Current and Future Undergraduates&lt;/h2&gt;

&lt;p&gt;After all the lessons I’ve learned and work I’ve put into teaching, I highly
encourage other undergraduates to consider teaching as well for the following
reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Teaching is a great opportunity to get to know professors.&lt;/strong&gt; For large
lecture classes (typically the intro courses), it can be very difficult
to get an opportunity to talk one-on-one with professors and have them
know who you are. When you are on the course staff, the instructor personally
relies on you and the other course staff to run the course.
You get the rare opportunity to work with them and get to know them
on a more personal level.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You don’t really understand the material until you have to teach it to someone else.&lt;/strong&gt;
Teaching is great opportunity to review and solidify your understanding of
the course material, and in my experience when I teach, I always learn something
that I didn’t know when I first learned the material.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You get to see how a course is run and control the direction of a course.&lt;/strong&gt;
When you’re on the course staff, you see and run everything: the infrastructure
for distributing and receiving student submissions, the scripts and tools
used for grading, the discussions for deciding what to cover in the next lecture, section
or assignment, and more. As a result, course staff can typically have a large
impact on a course, including coming up with new assignments, section material, or
guiding the direction of the course material.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You become a mentor figure for underclassmen.&lt;/strong&gt; I still remember the legendary
TFs I’ve had and how I admire them want to emulate them. When you teach,
you often become a mentor for students entering the concentration, and you can
have a large influence on the courses they choose and how they progress
through their time at Harvard within the concentration.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there are downsides as well for being a teaching fellow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Office hours is 24/7, even for classes you’re not teaching.&lt;/strong&gt; For large classes,
you often have many friends in the class. As a result, friends will direct
their questions to you in-person, through instant message, and through many other
means even when you’re not having office hours. You’ll also get questions for
classes that you’re not teaching. It can be difficult to draw the boundary
between being a helpful friend and being a teaching fellow.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;It is time consuming.&lt;/strong&gt; This semester, I’ve probably spent more time working on
CS161-related work than any of my actual courses. Office hours, teaching, preparing
for section, grading, attending lecture (for the hybrid classroom) can really add up.
In my opinion, it’s like taking a fifth class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;three-years-later&quot;&gt;Three Years Later&lt;/h2&gt;

&lt;p&gt;After three years of teaching, 4 different classes,
3 &lt;a href=&quot;http://bokcenter.harvard.edu/icb/icb.do?keyword=k1985&amp;amp;pageid=icb.page29684&quot;&gt;Certificates of Excellence in Teaching&lt;/a&gt;, over 40 sections taught, and nearly 100 students I’ve
had the privilege of teaching, I’ve seen some of my own students become
teaching fellows for the same classes or other classes (I’m a grand-TF, haha),
and I like to think
I influenced their decision in some way. I’ve also had many underclassmen
in my section ask for computer science advice, and I’ve now seen them advanced
through multiple classes within the concentration.&lt;/p&gt;

&lt;p&gt;I want to personally thank David, Greg, Eddie, and Margo for giving me the
opportunity to work with them and teach: teaching has definitely influenced
my undergraduate experiece in a significant and positive way, and college
would not have been the same without it.&lt;/p&gt;

&lt;p&gt;Being a teaching fellow has been an important experience for me in
terms of self-discovery: I learned that I really like to teach and plan lessons,
and this makes me want to pursue some teaching-related work in my future.&lt;/p&gt;</content><author><name></name></author><summary type="html">I taught my last section as an undergraduate today. I’ve been a teaching fellow for a computer science class every semester for the past three years, teaching: CS50 (Intro to Computer Science), Fall 2011 CS51 (Abstraction and Design), Spring 2012 and Spring 2013 CS61 (Systems Programming and Machine Organization), Fall 2012 and Fall 2013 CS161 (Operating Systems), Spring 2014 At Harvard, a “Teaching Fellow” is the equivalent of teaching assistants at most other universities. Technically, I’m a “Course Assistant” as the title “Teaching Fellow” is reserved for graduate students, but in many of the classes that I’ve taught, the undergraduates have the same (if not more) responsibilities than the graduate students. These typically include teaching section, holding office hours, and grading. Over the past three years, I’ve attempted to have an impact in all of the classes I’ve taught, and hopefully that impact will last after I graduate. Also, I’ve learned several lessons about teaching computer science classes, and I have advice for current or future undergraduates considering teaching.</summary></entry><entry><title type="html">Writing Synchronization Problems for OS161</title><link href="http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161/" rel="alternate" type="text/html" title="Writing Synchronization Problems for OS161" /><published>2014-03-20T01:25:00-07:00</published><updated>2014-03-20T01:25:00-07:00</updated><id>http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161</id><content type="html" xml:base="http://kennyyu.me/blog/2014/03/20/writing-synchronization-problems-for-os161/">&lt;p&gt;This semester, I have the privilege of being a teaching fellow
for Harvard’s legendary &lt;a href=&quot;http://www.eecs.harvard.edu/~margo/cs161/&quot;&gt;operating systems class&lt;/a&gt;,
and I was tasked with writing the synchronization problems for
this year’s synchprobs assignment! The goal of these problems
is to get students to think carefully about the synchronization
primitives and data structures needed to solve highly concurrent
problems, avoiding the usual problems that come with concurrency:
race conditions, deadlock, starvation, etc.&lt;/p&gt;

&lt;p&gt;I remember how fun these problems
were last year (forming little fellowships of the ring and piazza posts,
meant to mimic creating barriers and reader-writer locks), and
I wanted to make sure the problems were just as fun this year.
I was tasked specifically to write problems to mimic the
synchronization one would use to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;waitpid()&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;
(how would you do it?) and the synchronization needed
between address spaces and the coremap when implementing
a virtual memory system in the third assignment. Given
these specifications, I came up with
&lt;strong&gt;Singing Cows&lt;/strong&gt; and &lt;strong&gt;&lt;del&gt;Hunger&lt;/del&gt; Deletion Games&lt;/strong&gt; synchprobs!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;To keep up with the playful spirit of the problems, I
disguised the waitpid/exit problem as a &lt;strong&gt;Singing Cows Problem&lt;/strong&gt;:
a daddy cow must wait until each baby cow finishes
singing “Call Me Maybe” before the daddy cow can congratulate
the baby! The final version of the problem eventually
mimicked &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; instead, essentially making the daddy
cow wait until &lt;strong&gt;any&lt;/strong&gt; baby cow finishes singing.&lt;/p&gt;

&lt;p&gt;I had just watched &lt;em&gt;Hunger Games: Catching Fire&lt;/em&gt;, and this
was my inspiration for the second problem: &lt;strong&gt;&lt;del&gt;Hunger&lt;/del&gt; Deletion Games&lt;/strong&gt;.
In this problem, Katniss and Peeta each have multiple threads
and are attempting to sever mappings between the districts
and the capitol (for the sake of the problem, assume there
are &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLOTS&lt;/code&gt; districts). These mappings are represented
by a bijection between
capitol slots and district slots. The catch in this problem,
however, is that Katniss and Peeta are concurrently deleting
from opposite sides (Katniss from the capitol side and Peeta
from the district side), so students must avoid
both race conditions (concurrent deletions of the same slot)
and deadlock (concurrent deletions of the same mapping
from opposite sides). This situation mimics the coremap-address
space situation in which threads handling a page fault
need to access a page table entry and then
a coremap entry, while a cleaner thread simultaenously needs
to access a coremap entry and then the corresponding page
table entry. I remember it took me several weeks last year to fully
understand the synchronization needed for this coremap-address space
situation, and I was curious to see what kinds of solutions
students came up with. How would &lt;strong&gt;you&lt;/strong&gt; solve this problem?&lt;/p&gt;

&lt;p&gt;To see the source code for the problems and scripts to
check the solutions, see the &lt;a href=&quot;https://github.com/kennyyu/cs161-a1scripts&quot;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem statements are shown below. Correct implementations should
avoid big lock solutions, and should not allow race conditions,
deadlocks, and starvation.&lt;/p&gt;

&lt;h2 id=&quot;singing-cows&quot;&gt;Singing Cows&lt;/h2&gt;

&lt;p&gt;A cow has many children. Each baby cow puts on a performance by singing
lyrics to “Call Me Maybe.” Like a good parent, the daddy cow must
sit through each one of its baby cow’s performances until the end, in order
to say “Congratulations Baby N!” where N corresponds to the N-th baby cow.&lt;/p&gt;

&lt;p&gt;At any given moment, there is a single parent cow and possibly multiple
baby cows singing. The parent cow is not allowed to congratulate a baby
cow until that baby cow has finished singing. Your solution CANNOT
wait for ALL the cows to finish before starting to congratulate the babies.&lt;/p&gt;

&lt;p&gt;Here is an example of correct looking output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
Baby   1 Cow: Hot night, wind was blowin'
Baby   2 Cow: Ripped jeans, skin was showin'
Baby   4 Cow: Don't ask me, I'll never tell
Baby   5 Cow: And this is crazy
Baby   8 Cow: Hot night, wind was blowin'
Parent   Cow: Congratulations Baby 7!
Baby   1 Cow: And now you're in my way
Baby   2 Cow: And now you're in my way
Baby   4 Cow: Hey, I just met you
Baby   5 Cow: Pennies and dimes for a kiss
Baby   8 Cow: But now you're in my way
Parent   Cow: Congratulations Baby 1!
Baby   2 Cow: Ripped jeans, skin was showin'
Baby   4 Cow: I'd trade my soul for a wish
Baby   8 Cow: Hey, I just met you
Parent   Cow: Congratulations Baby 5!
Baby   2 Cow: Your stare was holdin'
Baby   4 Cow: But now you're in my way
Baby   8 Cow: Don't ask me, I'll never tell
Baby   2 Cow: Your stare was holdin'
Baby   4 Cow: Hot night, wind was blowin'
Baby   8 Cow: But now you're in my way
Baby   2 Cow: Your stare was holdin'
Baby   4 Cow: I'd trade my soul for a wish
Baby   8 Cow: But here's my number
Baby   2 Cow: Ripped jeans, skin was showin'
Baby   4 Cow: But now you're in my way
Baby   8 Cow: But now you're in my way
Parent   Cow: Congratulations Baby 2!
Baby   4 Cow: Your stare was holdin'
Baby   8 Cow: Hey, I just met you
Baby   4 Cow: And this is crazy
Baby   8 Cow: I wasn't looking for this
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hunger-deletion-games&quot;&gt;&lt;del&gt;Hunger&lt;/del&gt; Deletion Games&lt;/h2&gt;

&lt;p&gt;Katniss and Peeta are tired of Hunger Games and want to play a new kind
of game instead, the Deletion Games! They want to sever all ties between
the Capitol and all of its districts (for the sake of this problem, assume
that there are actually &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLOTS&lt;/code&gt; districts). Katniss is severing ties
from the Capitol side, and Peeta is severing ties from the Districts’ side.&lt;/p&gt;

&lt;p&gt;There is a 1:1 correspondence between &lt;code class=&quot;highlighter-rouge&quot;&gt;capitol_slots&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;district_slots&lt;/code&gt;. This
means that each slot in &lt;code class=&quot;highlighter-rouge&quot;&gt;capitol_slots&lt;/code&gt; has exactly one corresponding entry in
&lt;code class=&quot;highlighter-rouge&quot;&gt;district_slots&lt;/code&gt;, and each slot in &lt;code class=&quot;highlighter-rouge&quot;&gt;district_slots&lt;/code&gt; has exactly one corresponding
entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;capitol_slots&lt;/code&gt;. More formally:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;For all i in {0, 1, 2, ..., NSLOTS - 1},
if capitol_slot[i].is_mapped == true, then
district_slot[capitol_slot[i].district_index].is_mapped == true AND
district_slot[capitol_slot[i].district_index].capitol_index == i

AND similarly if district_slot[i].is_mapped == true.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Katniss and Peeta each will use &lt;code class=&quot;highlighter-rouge&quot;&gt;NTHREADS&lt;/code&gt; to delete these mappings. Katniss
will delete mappings based on randomly generated capitol indices, and Peeta
will delete mappings based on randomly generated district indices.&lt;/p&gt;

&lt;p&gt;For example, suppose Katniss randomly chooses capitol index 4 to delete.
She looks at capital slot 4, sees that the slot is still mapped, and finds
the corresponding district index is 12. Then Katniss will free the mappings
in capitol slot 4 and district slot 12.&lt;/p&gt;

&lt;p&gt;Suppose Peeta, on the other hand, randomly chooses district index 12 to
delete. He looks at district slot 12, sees that the slot is still mapped,
and finds the corresponding capitol index is 4. Then Peeta will free the
mappings in district slot 12 and capitol slot 4.&lt;/p&gt;

&lt;p&gt;However, without proper synchronization, we may get:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;race conditions: if multiple threads attempt to delete the same mappings at the same time&lt;/li&gt;
  &lt;li&gt;deadlock: Katniss and Peeta try to delete the (capitol 4, district 12)
mappings at the same time starting from opposite sides&lt;/li&gt;
  &lt;li&gt;starvation: all the mappings must eventually be deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your solution must satisfy these conditions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Avoid race conditions.&lt;/li&gt;
  &lt;li&gt;Avoid any unsynchronized reads (reads on a shared variable without holding the mutex for that variable).&lt;/li&gt;
  &lt;li&gt;No threads may exit until all the mappings have been deleted.&lt;/li&gt;
  &lt;li&gt;Guarantee no deadlock can occur. Your invariants and comments should
provide a convincing proof of this.
HINT: You should insert well-placed &lt;code class=&quot;highlighter-rouge&quot;&gt;thread_yield()&lt;/code&gt; calls in your code to
convince yourself of no deadlock.&lt;/li&gt;
  &lt;li&gt;When Katniss and Peeta generate random indices to delete, you may decide
to IGNORE that index if you wish and move onto the next index. However,
all mappings must eventually be deleted.
HINT: Use this to your advantage to introduce some asymmetry to the
problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of correct looking output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
{who: katniss, capitol: 86, district: 16, deleted: 114}
{who: katniss, capitol: 108, district: 97, deleted: 115}
{who: peeta, capitol: 89, district: 13, deleted: 116}
{who: katniss, capitol: 103, district: 49, deleted: 117}
{who: katniss, capitol: 5, district: 91, deleted: 118}
{who: peeta, capitol: 57, district: 44, deleted: 119}
{who: katniss, capitol: 39, district: 81, deleted: 120}
{who: katniss, capitol: 55, district: 96, deleted: 121}
{who: peeta, capitol: 101, district: 64, deleted: 122}
{who: katniss, capitol: 44, district: 58, deleted: 123}
{who: katniss, capitol: 59, district: 78, deleted: 124}
{who: katniss, capitol: 80, district: 85, deleted: 125}
{who: katniss, capitol: 122, district: 88, deleted: 126}
{who: katniss, capitol: 67, district: 114, deleted: 127}
{who: katniss, capitol: 61, district: 17, deleted: 128}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">This semester, I have the privilege of being a teaching fellow for Harvard’s legendary operating systems class, and I was tasked with writing the synchronization problems for this year’s synchprobs assignment! The goal of these problems is to get students to think carefully about the synchronization primitives and data structures needed to solve highly concurrent problems, avoiding the usual problems that come with concurrency: race conditions, deadlock, starvation, etc. I remember how fun these problems were last year (forming little fellowships of the ring and piazza posts, meant to mimic creating barriers and reader-writer locks), and I wanted to make sure the problems were just as fun this year. I was tasked specifically to write problems to mimic the synchronization one would use to implement waitpid()/exit() (how would you do it?) and the synchronization needed between address spaces and the coremap when implementing a virtual memory system in the third assignment. Given these specifications, I came up with Singing Cows and Hunger Deletion Games synchprobs!</summary></entry><entry><title type="html">C Error Handling</title><link href="http://kennyyu.me/blog/2014/03/19/c-error-handling/" rel="alternate" type="text/html" title="C Error Handling" /><published>2014-03-19T19:42:00-07:00</published><updated>2014-03-19T19:42:00-07:00</updated><id>http://kennyyu.me/blog/2014/03/19/c-error-handling</id><content type="html" xml:base="http://kennyyu.me/blog/2014/03/19/c-error-handling/">&lt;p&gt;After taking an &lt;a href=&quot;http://www.eecs.harvard.edu/~margo/cs161/&quot;&gt;operating systems class&lt;/a&gt;
last year and taking a
&lt;a href=&quot;http://stratos.seas.harvard.edu/classes/cs165-data-systems&quot;&gt;data systems class&lt;/a&gt; this semester, I’ve picked up a few patterns
to make it easier to handle error conditions in C.&lt;/p&gt;

&lt;p&gt;Consider the following example from my data systems class, where I initialize
a directory to act as persistent storage for my database.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// name of the db directory&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pointer to metadata file&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// protect addition of columns&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnarray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// array of open columns&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- more --&gt;

&lt;p&gt;Here’s a first pass at initializing a storage struct. In this example,
I ignore all errors and will throw an assertion error if an error
occurs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;storage_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnarray_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IRWXU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s/%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;METADATA_FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Obviously, this is not robust. If any of the operations return
an error, we would get an assertion failure and our server
process would exit unexpectedly. Thus, we need to check for errors
and cleanup all the calls that occurred before the error.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;storage_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnarray_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IRWXU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;columnarray_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s/%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;METADATA_FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rmdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;columnarray_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, performing error handling naively like this
results in quadratic growth in cleanup operations: each
error checking needs to cleanup every operation before it,
and as a result, the &lt;code class=&quot;highlighter-rouge&quot;&gt;free(storage)&lt;/code&gt; line gets repeated
multiple times. Can we do better?&lt;/p&gt;

&lt;p&gt;Yes! The key to this is use &lt;code class=&quot;highlighter-rouge&quot;&gt;goto&lt;/code&gt; statements. Many
introductory computer science courses discourage use
of goto statements, and rightfully so: goto statements,
if used inappropriately, can lead to spaghetti code
and can make code very difficult to reason about. However,
error handling is a perfect use for goto statements
to avoid quadratic code growth.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;storage_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnarray_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IRWXU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup_colarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s/%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;METADATA_FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup_mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// success&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;cleanup_mkdir:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rmdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cleanup_colarray:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;columnarray_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cleanup_lock:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cleanup_malloc:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;done:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By laying out
the error handling code labels in reverse order in which
the operations were invoked, we can quickly jump
to the appropriate position to start cleaning up
all the operations that occurred before it. This eliminates
the quadratic code growth in error handling! Furthermore,
there is only one exit point of this function (at the very
bottom), and reasoning about exit points for this version
is much easier than the previous version, especially
when we throw in concurrencry primitives and needing to remember
to release locks.&lt;/p&gt;

&lt;p&gt;To eliminate the boiler plate of checking the return value
and then jumping to the appropriate label on error, I wrote
a couple of useful macros. It relies on design decision
to make all functions that may have an error:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Return &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; (e.g., if the function allocates a data structure)&lt;/li&gt;
  &lt;li&gt;Return &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, where the int is an error code specific to your application, and 0 is success.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _DBERROR_H_
#define _DBERROR_H_
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dberror&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DBSUCCESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DBENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// other errors&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dberror_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dberror&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dberror_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define DBLOG(result) \
        dberror_log((char *) dberror_string((result)), \
                     __FILE__, __LINE__, __func__);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this code, I define an enumeration &lt;code class=&quot;highlighter-rouge&quot;&gt;enum dberror&lt;/code&gt; to represent
the different kinds of error codes for my database application.
I also provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;DBLOG(result)&lt;/code&gt; macro which, when given an error
code, prints out the human readable string for that code, as well
as the file, line number, and function where &lt;code class=&quot;highlighter-rouge&quot;&gt;DBLOG&lt;/code&gt; was invoked.
By designing your internal API using the two points above and invoking
&lt;code class=&quot;highlighter-rouge&quot;&gt;DBLOG&lt;/code&gt; every time an error occurs, we effectively get a stack
trace for every error!&lt;/p&gt;

&lt;p&gt;Now let’s combine this error logging facility to reduce the
boiler plate for the error handling code above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _TRY_H_
#define _TRY_H_
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stddef.h&amp;gt;
#include &quot;dberror.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define TRY(result, expr, cleanup) \
    (result) = (expr); \
    if ((result)) { \
        DBLOG((result)); \
        goto cleanup; \
    }
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define TRYNULL(result, err, var, expr, cleanup) \
    (var) = (expr); \
    if ((var) == NULL) { \
        (result) = (err); \
        DBLOG((result)); \
        goto cleanup; \
    }
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TRY&lt;/code&gt; macro allows us to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;expr&lt;/code&gt;, and if
that returns a nonzero error code, we jump to the provided
cleanup label.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TRYNULL&lt;/code&gt; macro is similar–it assigns &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; to be the
result of &lt;code class=&quot;highlighter-rouge&quot;&gt;expr&lt;/code&gt;, checks if &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;, and if it is,
assigns the appropriate error code to result and jumps to
the cleanup label.&lt;/p&gt;

&lt;p&gt;Using this, let’s write our final version of storage:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;storage_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TRYNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TRYNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TRYNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnarray_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IRWXU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup_colarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s/%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;METADATA_FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TRYNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBEIONOFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup_mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// success&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;cleanup_mkdir:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rmdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cleanup_colarray:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;columnarray_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_open_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cleanup_lock:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cleanup_malloc:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;done:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Nice and simple! Here’s all the things that this pattern addressed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allow error handling using only linear, and not quadratic, code growth.&lt;/li&gt;
  &lt;li&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;TRY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TRYNULL&lt;/code&gt; macros eliminate the boiler plate, and automatically performs logging to give us a stack trace of errors.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">After taking an operating systems class last year and taking a data systems class this semester, I’ve picked up a few patterns to make it easier to handle error conditions in C. Consider the following example from my data systems class, where I initialize a directory to act as persistent storage for my database. struct storage { char st_dbdir[128]; // name of the db directory struct file *st_file; // pointer to metadata file struct lock *st_lock; // protect addition of columns struct columnarray *st_open_cols; // array of open columns };</summary></entry><entry><title type="html">Learning Through Bootcamps</title><link href="http://kennyyu.me/blog/2013/11/18/bootcamps/" rel="alternate" type="text/html" title="Learning Through Bootcamps" /><published>2013-11-18T11:25:00-08:00</published><updated>2013-11-18T11:25:00-08:00</updated><id>http://kennyyu.me/blog/2013/11/18/bootcamps</id><content type="html" xml:base="http://kennyyu.me/blog/2013/11/18/bootcamps/">&lt;p&gt;This semester, I’ve been writing and leading &lt;a href=&quot;https://github.com/hcs/bootcamp-main/&quot;&gt;bootcamps&lt;/a&gt; as the
&lt;a href=&quot;http://www.hcs.harvard.edu/&quot;&gt;Harvard Computer Society&lt;/a&gt; Bootcamp Manager. In the past, HCS has
had bootcamps on various topics including python, javascript, and git. Bootcamps are typically
targetted for students just starting computer science (fresh{wo}men, sophomores).&lt;/p&gt;

&lt;p&gt;My goal this smester was to restart the bootcamps and to revamp the curriculum. In this post, I’ll talk about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;strong&gt;bootcamp curriculum&lt;/strong&gt; I designed&lt;/li&gt;
  &lt;li&gt;The typical &lt;strong&gt;workflow&lt;/strong&gt; for a bootcamp&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;design decisions&lt;/strong&gt; that went into writing these bootcamps&lt;/li&gt;
  &lt;li&gt;Some high level &lt;strong&gt;results&lt;/strong&gt; (pull request numbers and summary of testimonials)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unedited testimonials&lt;/strong&gt; from students in the bootcamps&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;bootcamp-curriculum&quot;&gt;Bootcamp Curriculum&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-setup/wiki&quot;&gt;Bootcamp Setup&lt;/a&gt; and &lt;a href=&quot;http://goo.gl/jk45W1&quot;&gt;slides&lt;/a&gt;.
From my experience leading bootcamps
last semester, I realized it is really hard to cater to so many different programming
backgrounds and machine setups. As a result, I chose to standardize and require students
to install a UNIX system with a package manager:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;OSX with &lt;a href=&quot;http://brew.sh/&quot;&gt;homebrew&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://manual.cs50.net/appliance/&quot;&gt;CS50 Appliance&lt;/a&gt;, since most students are either taking
or have taken &lt;a href=&quot;https://cs50.harvard.edu/&quot;&gt;CS50&lt;/a&gt;, Harvard’s Intro to Computer Science course.&lt;/li&gt;
      &lt;li&gt;Ubuntu virtual machine with VirtualBox or VMWare&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-unix/wiki&quot;&gt;Intro to UNIX Part 1: Command Line&lt;/a&gt; and &lt;a href=&quot;http://goo.gl/5NJyWw&quot;&gt;slides&lt;/a&gt;.
This bootcamp presents the UNIX command line and the stdin, stdout, stderr, and pipe abstractions.
&lt;a href=&quot;https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Scavenger-hunt&quot;&gt;Exercises&lt;/a&gt;
include scavenger hunts through a code base using &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;, and piping
a sequence of commands together transform and analyze files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-unix/wiki/Shell-scripts&quot;&gt;Intro to UNIX Part 2: Shell Scripting&lt;/a&gt; and &lt;a href=&quot;http://goo.gl/kRpD4y&quot;&gt;slides&lt;/a&gt;.
This continues the introduction to UNIX with shell scripts. Exercises include:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Writing a &lt;a href=&quot;https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Shell-scripts&quot;&gt;web scraper to scrape images from Amazon&lt;/a&gt;
using only basic UNIX commands, and writing&lt;/li&gt;
      &lt;li&gt;A &lt;a href=&quot;https://github.com/hcs/bootcamp-unix/wiki/Exercise:-Mail-Merge-Shell-Script&quot;&gt;mail merge script&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-git/wiki&quot;&gt;Git and Github&lt;/a&gt; and &lt;a href=&quot;http://goo.gl/siE4CQ&quot;&gt;slides&lt;/a&gt;.
This bootcamp introduces students to version control and using git with Github. Exercises include&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-git/wiki/Exercise-Scavenger-Hunt&quot;&gt;Scavenger Hunt&lt;/a&gt;
through a repository’s history (e.g. which commit introduced a change, who did it, checking out an old revision)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-git/wiki/Exercise-Committing-and-Pushing&quot;&gt;Committing and Pushing&lt;/a&gt;. Have students
attempt to replicate a git history tree.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-git/wiki/Exercise-Resolving-Merge-Conflicts&quot;&gt;Resolving Merge Conflicts&lt;/a&gt;.
I made a branch that would purposely cause a merge conflict when students attempt to merge the branch
into their master branch.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-git/wiki/Exercise-Reverting-a-commit&quot;&gt;Reverting a Commit&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-git/wiki/Exercise-Making-a-Pull-Request&quot;&gt;Making a Pull Request&lt;/a&gt;. Students
create a pull request on github. This exercise allows students to make pull requests in the future
and to give me and the HCS board the opportunity to give them feedback on their work.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-python/wiki&quot;&gt;Intro to Python&lt;/a&gt; and &lt;a href=&quot;http://goo.gl/9ID3ad&quot;&gt;slides&lt;/a&gt;.
This bootcamp introduces students to basic feature of Python, including control flow and data structures
(lists, sets, dictionaries, tuples, strings). Exercises include:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-python/wiki/Exercise-Hello-World&quot;&gt;Hello World!&lt;/a&gt;.
This also sets up a pull request to keep track of their work.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-python/wiki/Exercise-Spell-Checker&quot;&gt;Spell Checker&lt;/a&gt;. Inspired by CS50’s
&lt;a href=&quot;http://cdn.cs50.net/2013/fall/psets/6/pset6/pset6.html&quot;&gt;Spell Checker&lt;/a&gt; problem set, I wanted to
show students how much Python abstracts many things away and makes programming in Python extremely
simple and easy.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-python/wiki/Exercise-Programming&quot;&gt;Python Exercises&lt;/a&gt;. This is an example
of test-driven development: we give students failing unit tests, and their job is to make
all the unit tests pass.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;workflow&quot;&gt;Workflow&lt;/h2&gt;

&lt;p&gt;I designed the workflow centered around github wiki pages and pull requests. Here’s the workflow for a typical bootcamp:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start reading the github wiki page for the bootcamp repository.&lt;/li&gt;
  &lt;li&gt;Fork the bootcamp repository and clone it to their local machines.&lt;/li&gt;
  &lt;li&gt;Do some of the exercises.&lt;/li&gt;
  &lt;li&gt;Setup a pull request using the original bootcamp respository as the base of the pull request,
and their master branch as the head of the pull request&lt;/li&gt;
  &lt;li&gt;Do some more exercises and push commits to their master branch, which will update their pull request.&lt;/li&gt;
  &lt;li&gt;Wait for feedback on the pull request.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;design-goals&quot;&gt;Design Goals&lt;/h2&gt;

&lt;p&gt;I designed the curriculum and workflow with multiple goals in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Flipped Classroom.&lt;/strong&gt; From my experience in classes with
&lt;a href=&quot;http://www.eecs.harvard.edu/~margo/cs161/&quot;&gt;flipped classrooms&lt;/a&gt;,
students learn (at least with programing exercises) much better when they have hands-on
exercises with guidance from the instructor. With this in mind, I wrote all the bootcamps
to minimize the amount of lecturing I give and to maximize the amount of time students
would be programming and asking questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Useful Software Engineering Skills.&lt;/strong&gt; With these bootcamps, I wanted to provide
others with the exercises and support that I wish I had had as a freshmen–exercises
to teach some basic skills that would be useful not only in industry, but also
useful in an academic setting. From my experiences in internships and classes,
some of the most useful skills that have learned are&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;using the command line effectively&lt;/li&gt;
      &lt;li&gt;scripting repetitive tasks (e.g. test harnesses, moving/editing files)&lt;/li&gt;
      &lt;li&gt;using version control&lt;/li&gt;
      &lt;li&gt;having a go-to language for quick prototyping and tasks&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Start from Zero.&lt;/strong&gt; Because HCS’s target audience is students with very
little programming experience, I wrote the bootcamps so that anyone starting
from zero programming experience could quickly get their environment setup
and start using the command line. Naturally, there will be students that
already have programming experience, and I supplemented the basic exercises
in bootcamps with more involved exercises that students can do on their
own pace.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Feedback System.&lt;/strong&gt; I believe it’s very important to get feedback
on your work, especially when programming for the first time. Therefore, I
designed the bootcamps to use github’s pull request feature for comments
and feedback. Pull requests allow us to leave in-line comments on code,
and to provide a comment-discussion feature for general feedback. I also
encouraged students to install the &lt;a href=&quot;https://chrome.google.com/webstore/detail/gh-diff-highlight/gjljgldconccfbldbnnpbgahpckhjcfj&quot;&gt;GH Diff Highlight Chrome Extension&lt;/a&gt;
to colorize pull request diffs.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/hcs/bootcamp-python/pulls&quot;&gt;Here&lt;/a&gt; are examples of the
feedback we provided on the Intro to Python bootcamp.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reusable.&lt;/strong&gt; I am a senior and will be graduating soon; as a result, I
want the bootcamps to be reusable after I leave. Because of this,
I made all the bootcamps open source github repositories
so that they may be reused, updated, and forked as necessary in the future.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;Overall, attendance was generally higher than I expected. The attendance for
the setup and first two UNIX bootcamps were roughly 30-40 people, which
is one of the highest attendance rates HCS has had in a while for a bootcamp.
Naturally, as the semester progresses, students get more busy with midterms and assignments,
and so attendance dropped to about 20 for git, and a dozen or so for the Python
bootcamp. After each bootcamp, I posted a survey asking for feedback. I asked
the question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What did you think of the bootcamp? (What you liked, didn’t like, what was useful, wasn’t useful. What would you have done differently? etc.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The feedback was generally positive. The types of feedback were generally along one or
more of these categories (see the Testimonial section at the end for real responses):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hands-on flipped classroom sessions were helpful in helping students digest the material.&lt;/li&gt;
  &lt;li&gt;More advanced students wanted more challenging exercises.&lt;/li&gt;
  &lt;li&gt;Too fast/too slow.&lt;/li&gt;
  &lt;li&gt;Requests for review of material from previous sessions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In terms of numbers, the &lt;a href=&quot;https://github.com/hcs/bootcamp-git/pulls&quot;&gt;Git and Github Bootcamp&lt;/a&gt; had 28 forks, with 16
students successfully submitting a pull request. The &lt;a href=&quot;https://github.com/hcs/bootcamp-git/pulls&quot;&gt;Python Bootcamp&lt;/a&gt; had 16 forks,
with 10 students sucessfully submitting a pull request, and 4 students finishing all the python exercises.&lt;/p&gt;

&lt;p&gt;From these numbers and testimonials, it seems that the flipped classroom model worked very well,
and the various levels of exercises and walkthroughs catered to both advanced and beginner students.&lt;/p&gt;

&lt;h2 id=&quot;testimonials&quot;&gt;Testimonials&lt;/h2&gt;

&lt;p&gt;Below are the unedited and anonymized testimonials from students:&lt;/p&gt;

&lt;h3 id=&quot;unix-part-1-command-line&quot;&gt;UNIX Part 1: Command Line&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;This seems well done, albeit rather basic. Maybe mentioning “do one thing well” to explain why UNIX works the way it does.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I thought it was good since it taught me all the basics in one sitting&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Like it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I think this was great although taught a little quickly&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Useful, but went a little slowly; Overall was run very well, learned some useful UNIX commands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Very useful! I learned a lot about some of the basic commands available to us. I wish we’d dived into the scavenger hunt sooner so we could’ve had more time for it and the shell script exercise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I liked how many functions could be linked to each other. That was really cool. Also how there are functions that allow tons of flexibility with the -char ability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Very helpful especially one-on-one. Went through the slides a bit too fast&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Awesome! While I’ve done a good amount of programming before, I haven’t had a chance to learn many of the covered UNIX commands… until now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thanks for an awesome class, Kenny!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;smaller room preferably&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Scavenger hunt was fun. I’m glad I sat next to people who were more familiar with this material.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ir was really useful.  I got a better sense of how to use the command line than ever before!  Thanks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It got a little hectic at the end…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I thought it went a little too fast for me. But I enjoy the premises of the program. I just wish it was not so much like a class, but a collaboration so that everyone feels involved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I thought it was a really good topic, but it moved to quickly for me. It also would have been nice if there were more people to answer questions, because that was really helpful. Along with piazza, it would be nice to have a small recap session to go over the topics and solidify them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;This was a good set of exercises.  I got distracted with unrelated things (c/p, sending the answers directly to answers.txt), so I lagged behind.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I liked it! I thought I knew shell scripting before, but now I feel more comfortable with channeling and piping and whatnot. :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was very informative!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve learned a lot. It was very informative.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Great tutorial. Learned a lot about UNIX, especially piping.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;unix-part-2-shell-scripting&quot;&gt;UNIX Part 2: Shell Scripting&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;could have been a little more organized.  But people were very helpful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Useful bootcamp, I didn’t know how to write shell scripts…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I liked having the recap of last week and generally enjoyed this exercise.  I like the presence of a second exercise for those who finish early.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Could’ve used more instruction on the scraper parts - using man over and over again got annoying&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;git-and-github&quot;&gt;Git and Github&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Awesome overview of git. I knew a bit coming in, but setting up the alias for my “lg” command was great, so that I can see my requests in a more aesthetically pleasing fashion. Maybe a bit more on creating branches to make temporary changes and then merging your own branch back.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;github is harder than i expected–it’s like a whole new world of stuff! so it was largely a struggle but i think i learned a lot&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Liked how straightforward it was. I would maybe have thrown in a challenge exercise&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was very fun and easy to understand. Plus, I learned a whole bunch of stuff I never knew before (and a lot of things unrelated to git, but useful as a whole, like how to use vim). :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was fantastic! I don’t think I would have done anything differently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Useful, already knew a decent amount about git. The pace was good, wouldn’t have changed anything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is difficult but manageable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Exercises are nice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was great! And useful!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I thought the bootcamp was useful. Github is a lot more manageable and less confusing after today’s bootcamp. I’m glad I came.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;This one was really good and understandable!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I wasn’t able to come to the bootcamp on Wednesday, but I just completed it on my own - the slides and online directions were really helpful, and I could pretty much figure most things out on my own.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;On a side note, I also completed the mail merger exercise from last week’s bootcamp, and the solution didn’t follow the instructions that we were given, so that confused me a little.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;intro-to-python&quot;&gt;Intro to Python&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pretty cool.  Exercises were nice, good practice.  I was already pretty familiar with Python, though, so not representative.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was useful, especially the talk about CS classes and coursework!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;This was a great lesson. The only problems I had were setting up git stuff, but that is mostly due to the fact that this was the first time I came up. There is not much to change other than perhaps moving a bit slower.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was great! Learnt a lot about python. Especially liked the exercises that helped me get a little more used to python syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I love to code and I love the exercises, as well as the debugger tests that let me see what I was doing wrong and which lines. Python is so applicable. To improve, I think we could get thai(Spice?) for the food next time to add variety.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I liked that it had fewer directed parts and relied more on us learning some of python’s capabilities on our own&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">This semester, I’ve been writing and leading bootcamps as the Harvard Computer Society Bootcamp Manager. In the past, HCS has had bootcamps on various topics including python, javascript, and git. Bootcamps are typically targetted for students just starting computer science (fresh{wo}men, sophomores). My goal this smester was to restart the bootcamps and to revamp the curriculum. In this post, I’ll talk about: The bootcamp curriculum I designed The typical workflow for a bootcamp The design decisions that went into writing these bootcamps Some high level results (pull request numbers and summary of testimonials) Unedited testimonials from students in the bootcamps</summary></entry><entry><title type="html">Omnibox GDrive Search</title><link href="http://kennyyu.me/blog/2013/10/20/omnibox-gdrive-search/" rel="alternate" type="text/html" title="Omnibox GDrive Search" /><published>2013-10-20T22:11:00-07:00</published><updated>2013-10-20T22:11:00-07:00</updated><id>http://kennyyu.me/blog/2013/10/20/omnibox-gdrive-search</id><content type="html" xml:base="http://kennyyu.me/blog/2013/10/20/omnibox-gdrive-search/">&lt;p&gt;&lt;img src=&quot;/images/omnibox-gdrive-search.png&quot; alt=&quot;Omnibox GDrive Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I published my first Chrome Extension: &lt;a href=&quot;https://chrome.google.com/webstore/detail/omnibox-gdrive-search/faadbnlolclhboooficaklnhnkdjmdnb&quot;&gt;Omnibox GDrive Search&lt;/a&gt;!
The extension allows you to search your google drive for documents and then jump directly to them from the omnibox! See the &lt;a href=&quot;https://github.com/kennyyu/omnibox-gdrive-search&quot;&gt;code on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the omnibox, type &lt;code class=&quot;highlighter-rouge&quot;&gt;gd&lt;/code&gt; and press &lt;code class=&quot;highlighter-rouge&quot;&gt;TAB&lt;/code&gt;. Now you can enter your queries and jump directly to the file from the omnibox suggestions!&lt;/p&gt;

&lt;p&gt;To use it, you must first authorize Google Drive metadata read-only access to the extension by following these instructions (see screenshots in extension link):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome://extensions&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find this extension, and click “Options”&lt;/li&gt;
  &lt;li&gt;Click “Authorize”, and then click “Accept” to grant the extension access. This will redirect to a blank page. Close it, and refresh the options page.&lt;/li&gt;
  &lt;li&gt;If you see “You have already authorized this extension!”, then you can now search!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By far, the most difficult part of the extension was understanding authorization with Google Drive. The extension is a bit
buggy and lags a little because the extension must renew the authorization with Google Drive every 15 minutes or so.
To get around this, the extension only requests authorization on the first use after the expiration and will
redirect the user to the options page.
Thus, if you’re using the extension for the first time in a while, it may take ~3 seconds before search results come back.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Pipeline for Improving Hand Tracking Accuracy</title><link href="http://kennyyu.me/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy/" rel="alternate" type="text/html" title="Pipeline for Improving Hand Tracking Accuracy" /><published>2012-12-10T21:48:00-08:00</published><updated>2012-12-10T21:48:00-08:00</updated><id>http://kennyyu.me/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy</id><content type="html" xml:base="http://kennyyu.me/blog/2012/12/10/pipeline-for-improving-hand-tracking-accuracy/">&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;//www.youtube.com/embed/DFPg-9D46kE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;For my CS283: Computer Vision Final Project, I created an application to control Google Maps
using your hand and a webcam.&lt;/p&gt;

&lt;p&gt;It uses the Chrome API to access the webcam, and frames are sent to a Tornado server that
runs the hand tracking pipeline, annotates the frame, and sends back the displacement
vector to update the view of the map. I am using OpenCV for it’s Haar Cascade libraries.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/kennyyu/cs283-project&quot;&gt;view the code on github&lt;/a&gt;
and setup an instance of the server locally!&lt;/p&gt;

&lt;p&gt;You can also &lt;a href=&quot;https://www.dropbox.com/s/tnyzr1qt8fmnscp/hand-tracking-pipeline.pdf&quot;&gt;view the paper&lt;/a&gt;
I wrote to describe the process I used in the pipeline. Below is a summary of the problem
statement and the stages in the pipeline.&lt;/p&gt;

&lt;h1 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h1&gt;

&lt;p&gt;Given a poorly trained Haar Cascade Classifier (250 positive samples and 100 negative samples) to recognize hands,
this project assembles a pipeline to improve the quality of the tracking. These steps include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Face detection and removal of faces.&lt;/li&gt;
  &lt;li&gt;Background subtraction.&lt;/li&gt;
  &lt;li&gt;Use a simplified Kalman-Filter-esque technique to estimate the bounding box of the hand. This assumes that a hand moves in a smooth manner.&lt;/li&gt;
  &lt;li&gt;Use our hand classifier to detect the largest hand within the bounding box.&lt;/li&gt;
  &lt;li&gt;Compute the optical flow of points within the bounding box using Lucas-Kanade.&lt;/li&gt;
  &lt;li&gt;Use the optical flow and the measured position of the hand to correct our Kalman-Filter estimate.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>